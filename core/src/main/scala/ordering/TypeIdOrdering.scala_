

// Copyright Shunsuke Sogame 2008-2010.
// Distributed under the terms of an MIT-style license.


package com.github.okomok
package sing; package ordering


private[sing]
final class TypeIdOrdering extends AbstractOrdering {
    type self = TypeIdOrdering

    private  val impl: impl = list.naturalOrdering
    private type impl       = list.naturalOrdering

    override  def equiv[x <: Any, y <: Any](x: x, y: y): equiv[x, y] = impl.equiv(x.typeId.impl, y.typeId.impl)
    override type equiv[x <: Any, y <: Any]                          = impl#equiv[x#typeId#impl, y#typeId#impl]

    override  def compare[x <: Any, y <: Any](x: x, y: y): compare[x, y] = impl.compare(x.typeId.impl, y.typeId.impl)
    override type compare[x <: Any, y <: Any]                            = impl#compare[x#typeId#impl, y#typeId#impl]
}

